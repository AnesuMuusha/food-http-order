{"ast":null,"code":"var _jsxFileName = \"/home/ayshan/Documents/POportfolio/Food/food-http-order/src/components/Cart/CheckOut.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport \"./CheckOut.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isEmpty = value => value.trim() === \"\";\nconst isFiveChars = value => value.trim().length === 5;\nconst CheckOut = _ref => {\n  _s();\n  let {\n    onConfirm,\n    onCancel\n  } = _ref;\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  });\n  const nameInputRef = useRef(null);\n  const streetInputRef = useRef(null);\n  const postalCodeInputRef = useRef(null);\n  const cityInputRef = useRef(null);\n  const confirmHandler = event => {\n    event.preventDefault();\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostalCodeIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostalCodeIsValid;\n    if (formIsValid) {\n      onConfirm({\n        name: enteredName,\n        street: enteredStreet,\n        city: enteredCity,\n        postalCode: enteredPostalCode\n      });\n    }\n  };\n  const nameControlClasses = `${\"control\"} ${formInputsValidity.name ? \"\" : \"invalid\"}`;\n  const streetControlClasses = `${\"control\"} ${formInputsValidity.street ? \"\" : \"invalid\"}`;\n  const postalCodeControlClasses = `${\"control\"} ${formInputsValidity.postalCode ? \"\" : \"invalid\"}`;\n  const cityControlClasses = `${\"control\"} ${formInputsValidity.city ? \"\" : \"invalid\"}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form\",\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), !formInputsValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid name!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), !formInputsValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid Street!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postalCodeControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalCodeInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), !formInputsValidity.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid Postal Code!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit\",\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(CheckOut, \"mZCsAtBIFQjke8GBuQYAXPOOADw=\");\n_c = CheckOut;\nexport default CheckOut;\nvar _c;\n$RefreshReg$(_c, \"CheckOut\");","map":{"version":3,"names":["React","useRef","useState","isEmpty","value","trim","isFiveChars","length","CheckOut","onConfirm","onCancel","formInputsValidity","setFormInputsValidity","name","street","city","postalCode","nameInputRef","streetInputRef","postalCodeInputRef","cityInputRef","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostalCode","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredCityIsValid","enteredPostalCodeIsValid","formIsValid","nameControlClasses","streetControlClasses","postalCodeControlClasses","cityControlClasses"],"sources":["/home/ayshan/Documents/POportfolio/Food/food-http-order/src/components/Cart/CheckOut.tsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport \"./CheckOut.css\";\n\ntype CheckOutProps = {\n  onConfirm: (userData: {\n    name: string;\n    street: string;\n    city: string;\n    postalCode: string;\n  }) => void;\n  onCancel: () => void;\n};\n\nconst isEmpty = (value: string) => value.trim() === \"\";\nconst isFiveChars = (value: string) => value.trim().length === 5;\n\nconst CheckOut: React.FC<CheckOutProps> = ({ onConfirm, onCancel }) => {\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true,\n  });\n\n  const nameInputRef = useRef<HTMLInputElement>(null);\n  const streetInputRef = useRef<HTMLInputElement>(null);\n  const postalCodeInputRef = useRef<HTMLInputElement>(null);\n  const cityInputRef = useRef<HTMLInputElement>(null);\n\n  const confirmHandler = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const enteredName = nameInputRef.current!.value;\n    const enteredStreet = streetInputRef.current!.value;\n    const enteredPostalCode = postalCodeInputRef.current!.value;\n    const enteredCity = cityInputRef.current!.value;\n\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostalCodeIsValid,\n    });\n\n    const formIsValid =\n      enteredNameIsValid &&\n      enteredStreetIsValid &&\n      enteredCityIsValid &&\n      enteredPostalCodeIsValid;\n\n    if (formIsValid) {\n      onConfirm({\n        name: enteredName,\n        street: enteredStreet,\n        city: enteredCity,\n        postalCode: enteredPostalCode,\n      });\n    }\n  };\n\n  const nameControlClasses = `${\"control\"} ${\n    formInputsValidity.name ? \"\" : \"invalid\"\n  }`;\n  const streetControlClasses = `${\"control\"} ${\n    formInputsValidity.street ? \"\" : \"invalid\"\n  }`;\n  const postalCodeControlClasses = `${\"control\"} ${\n    formInputsValidity.postalCode ? \"\" : \"invalid\"\n  }`;\n  const cityControlClasses = `${\"control\"} ${\n    formInputsValidity.city ? \"\" : \"invalid\"\n  }`;\n\n  return (\n    <form className=\"form\" onSubmit={confirmHandler}>\n      <div className={nameControlClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input type=\"text\" id=\"name\" ref={nameInputRef} />\n        {!formInputsValidity.name && <p>Please enter a valid name!</p>}\n      </div>\n      <div className={streetControlClasses}>\n        <label htmlFor=\"street\">Street</label>\n        <input type=\"text\" id=\"street\" ref={streetInputRef} />\n        {!formInputsValidity.street && <p>Please enter a valid Street!</p>}\n      </div>\n      <div className={postalCodeControlClasses}>\n        <label htmlFor=\"postal\">Postal Code</label>\n        <input type=\"text\" id=\"postal\" ref={postalCodeInputRef} />\n        {!formInputsValidity.postalCode && (\n          <p>Please enter a valid Postal Code!</p>\n        )}\n      </div>\n        <div className={cityControlClasses}>\n          <button type='button' onClick={onCancel}>\n            Cancel\n          </button>\n          <button className='submit'>Confirm</button>\n        </div>\n      </form>\n    )\n}\n\nexport default CheckOut;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}